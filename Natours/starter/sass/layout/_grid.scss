.row {
  //if enough width then use that space. if not then allow
  //it to fill 100%v of space
  max-width: $grid-width;
  //trick to center element in other element
  //bottom and top is '0' and l/r = auto
  margin: 0 auto;
  //create pseudo class selects everything EXCEPT what is in the "not()"
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;

    @include respond(tab-port) {
      margin-bottom: $gutter-vertical-small;
    }
  }

  @include respond(tab-port) {
    max-width: 50rem;
    padding: 0 3rem;  
  }

  @include clearfix;

  // this selects all classes that START with col-
  // "^" = STARTS WITH
  // "$" = ENDS WITH
  // "*" = CONTAINS  
  // [] = ATTRIBUTES OF AN ELEMENT
  [class^="col-"] {
    float: left;

    &:not(:last-child) {
      margin-right: $gutter-horizontal;
    }
    @include respond(tab-port) {
      width: 100% !important;
      margin-right: 0;
      margin-bottom: $gutter-vertical-small;
    }
  }

  .col-1-of-2 {
    //mix units and do calculations
    width: calc((100% - #{$gutter-horizontal}) /2);
    
  }

  .col-1-of-3 {
    width: calc((100% - (2 * #{$gutter-horizontal}) )/3);
  }
  .col-2-of-3 {
    width: calc( 2*((100% - (2 * #{$gutter-horizontal}) )/3) + #{$gutter-horizontal} );
  }

  .col-1-of-4 {
    width: calc((100% - (3 * #{$gutter-horizontal}) )/4);

  }

  .col-2-of-4 {
    width: calc( 2*((100% - (3 * #{$gutter-horizontal}) )/4) + #{$gutter-horizontal} );

  }

  .col-3-of-4 {
    width: calc( 3*((100% - (3 * #{$gutter-horizontal}) )/4) + 2 * #{$gutter-horizontal} );

  }



}