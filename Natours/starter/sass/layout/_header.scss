.header {
  height: 85vh;
  background-image: linear-gradient(to right bottom,
    rgba($color-primary-dark, 0.8),
    /* rgba stands for red, green, blue, and opacity level */
    rgba($color-primary-light, .8)),
    url('../img/hero-small.jpg');
  background-size: cover;
  /* cover tries to fill the whole  space */
  background-position: top;
  /* this is so that the logo div child can be can positioned to absolute */
  position: relative;
  

  @supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    //new scss to cut an image into specific sizes
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    height: 95vh;
  }

  /* this adds 4 point locations for the image in relation to the total element. 
    Can be in percent or pixel and can be numerous amount of points */
  // the ampersand replaces the copied part, in this case instead of writing
  //.header__logo-box we can now do just &__logo-box

  // dots per inch based on apple retina display
  // if resolution is greater than this, than use below image
  // and screen is larger than 600px
  // OR if screen is larger than 2000px
  @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
        // below is a check for safari 
        only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),
        only screen and (min-width: 125em) {
    background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-dark, 0.8),
      rgba($color-primary-light, .8)),
      url('../img/hero.jpg');
  }

  @include respond(phone) {
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  }
  &__logo-box {
    position: absolute;
    /* this must be positioned to a parent element that is relative (in this case the .header element */
    top: 4rem;
    /* this measurement is the reference to the relative parent element */
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* position top and left will put the first pixel of the element at the position you want (50% and 50% */
    transform: translate(-50%, -50%);
    /* to make up for the above, you transform the SELF element by the offset amount so that the center of 
      that element is the pixel point that is being positions by the above top and left settings */
    text-align: center;
    /* this will align any child elements with text to center in this case including the button */
  }

}